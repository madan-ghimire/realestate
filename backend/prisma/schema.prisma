generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ====================
// Enums
// ====================

enum RoleType {
  SUPER_ADMIN
  ADMINISTRATOR
  AGENT
  CLIENT
  PROPERTY_OWNER
  INSIGHT_USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  INVITED
  LOCKED
  UNLOCK_SENT
}

enum PropertyType {
  HOUSE
  APARTMENT
  CONDO
  LAND
  COMMERCIAL
}

enum PropertyStatus {
  AVAILABLE
  PENDING
  SOLD
  RENTED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CASH
  PAYPAL
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum DocumentType {
  DEED
  CONTRACT
  INSPECTION_REPORT
  TAX
  OTHER
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  EXPIRED
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
  IN_APP
}

// ====================
// Core Multi-Tenant Models
// ====================

model Tenant {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  status      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users         User[]
  properties    Property[]
  listings      Listing[]
  bookings      Booking[]
  payments      Payment[]
  documents     Document[]
  subscriptions Subscription[]
  auditLogs     AuditLog[]
  notifications Notification[]
  leads         Lead[]
  favorites     Favorite[]
  savedSearches SavedSearch[]
  userRoles     UserRole[]
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  username    String   @unique
  password    String
  firstName   String
  lastName    String
  displayName String?
  phone       String?
  avatarUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role          RoleType   @default(CLIENT)
  status        UserStatus @default(ACTIVE)
  resetPassword Boolean    @default(false)
  otpVerified   Boolean    @default(false)
  loginAttempts Int        @default(0)
  lock          Boolean    @default(false)
  twoFA         Boolean    @default(false)

  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id])

  token          String?   @db.VarChar(255)
  tokenCreatedAt DateTime?

  ownedProperties   Property[]     @relation("OwnerProperties")
  agentListings     Listing[]      @relation("AgentListings")
  clientBookings    Booking[]      @relation("ClientBookings")
  uploadedDocuments Document[]
  payments          Payment[]
  roles             UserRole[]
  auditLogs         AuditLog[]
  notifications     Notification[]
  leads             Lead[]
  favorites         Favorite[]
  savedSearches     SavedSearch[]
}

// Many-to-Many User <-> Role (per tenant)
model UserRole {
  id       String   @id @default(uuid())
  role     RoleType
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  tenantId String
  tenant   Tenant   @relation(fields: [tenantId], references: [id])

  @@unique([userId, role, tenantId])
}

// ====================
// Token Model
// ====================

model Token {
  id         String   @id @default(uuid())
  token      String
  shortToken String
  timestamp  DateTime @default(now())
}

// ====================
// Real Estate Domain
// ====================

model Property {
  id          String         @id @default(uuid())
  title       String
  description String?
  type        PropertyType
  status      PropertyStatus @default(AVAILABLE)
  address     String
  city        String
  state       String
  zipCode     String
  country     String
  price       Float
  sizeSqFt    Float
  bedrooms    Int
  bathrooms   Int
  yearBuilt   Int?
  amenities   String[]
  images      String[]
  listedAt    DateTime?

  // Relations
  ownerId String
  owner   User   @relation("OwnerProperties", fields: [ownerId], references: [id])

  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id])

  listings  Listing[]
  documents Document[]
  favorites Favorite[]
}

// ====================
// Listings & Bookings
// ====================

model Listing {
  id          String   @id @default(uuid())
  title       String
  description String?
  price       Float
  isActive    Boolean  @default(true)
  listedAt    DateTime @default(now())

  // Relations
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])

  agentId String
  agent   User   @relation("AgentListings", fields: [agentId], references: [id])

  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id])

  bookings Booking[]
}

model Booking {
  id          String        @id @default(uuid())
  scheduledAt DateTime
  status      BookingStatus @default(PENDING)
  notes       String?

  // Relations
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])

  clientId String
  client   User   @relation("ClientBookings", fields: [clientId], references: [id])

  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id])
}

// ====================
// Payments
// ====================

model Payment {
  id          String        @id @default(uuid())
  amount      Float
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  description String?
  createdAt   DateTime      @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id])
}

// ====================
// Documents & Files
// ====================

model Document {
  id         String       @id @default(uuid())
  title      String
  type       DocumentType
  fileUrl    String       @db.VarChar(512)
  size       Int?
  mimeType   String?      @db.VarChar(128)
  uploadedAt DateTime     @default(now())

  uploadedById String
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])

  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id])

  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id])
}

// Subscription Plans
model SubscriptionPlan {
  id        String   @id @default(uuid())
  name      String
  price     Float
  currency  String   @default("USD")
  features  String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]
}

model Subscription {
  id         String             @id @default(uuid())
  status     SubscriptionStatus @default(TRIALING)
  startDate  DateTime           @default(now())
  endDate    DateTime?
  canceledAt DateTime?

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  planId String
  plan   SubscriptionPlan @relation(fields: [planId], references: [id])
}

// Audit Logs
model AuditLog {
  id        String   @id @default(uuid())
  action    String
  entity    String
  entityId  String
  details   Json?
  createdAt DateTime @default(now())

  userId   String?
  user     User?   @relation(fields: [userId], references: [id])
  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id])
}

// Notifications
model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  userId   String
  user     User    @relation(fields: [userId], references: [id])
  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id])
}

// Saved Searches
model SavedSearch {
  id        String   @id @default(uuid())
  name      String
  filters   Json
  createdAt DateTime @default(now())

  userId   String
  user     User    @relation(fields: [userId], references: [id])
  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id])
}

// Leads (for agents/owners)
model Lead {
  id        String   @id @default(uuid())
  name      String
  email     String?
  phone     String?
  notes     String?
  createdAt DateTime @default(now())

  assignedToId String?
  assignedTo   User?   @relation(fields: [assignedToId], references: [id])
  tenantId     String?
  tenant       Tenant? @relation(fields: [tenantId], references: [id])
}

// Favorites (users save properties)

model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])

  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id])

  @@unique([userId, propertyId])
}
